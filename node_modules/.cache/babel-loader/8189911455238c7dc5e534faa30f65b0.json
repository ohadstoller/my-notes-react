{"ast":null,"code":"var _jsxFileName = \"/Users/ohadstoller/my-notes/src/App.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst Button = props => /*#__PURE__*/_jsxDEV(\"button\", {\n  onClick: props.handleClick,\n  children: props.text\n}, void 0, false, {\n  fileName: _jsxFileName,\n  lineNumber: 4,\n  columnNumber: 5\n}, this);\n\n_c = Button;\n\nconst Display = props => {\n  const {\n    value\n  } = props;\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: value\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 11,\n    columnNumber: 13\n  }, this);\n};\n\n_c2 = Display;\n\nconst App = () => {\n  _s();\n\n  const [value, setValue] = useState(10);\n\n  const setToValue = newValue => {\n    setValue(newValue);\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(Display, {\n      value: value\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 26,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(Button, {\n      handleClick: () => setToValue(1000),\n      text: \"thousand\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 27,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(Button, {\n      handleClick: () => setToValue(0),\n      text: \"reset\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 28,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(Button, {\n      handleClick: () => setToValue(value + 1),\n      text: \"increment\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 29,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 25,\n    columnNumber: 9\n  }, this);\n};\n\n_s(App, \"7UAQAh2ykPDdHAB4TCqEq4Uj1Jg=\");\n\n_c3 = App;\nexport default App;\n\nvar _c, _c2, _c3;\n\n$RefreshReg$(_c, \"Button\");\n$RefreshReg$(_c2, \"Display\");\n$RefreshReg$(_c3, \"App\");","map":{"version":3,"sources":["/Users/ohadstoller/my-notes/src/App.js"],"names":["React","useState","Button","props","handleClick","text","Display","value","App","setValue","setToValue","newValue"],"mappings":";;;AAAA,OAAOA,KAAP,IAAeC,QAAf,QAA8B,OAA9B;;;AAEA,MAAMC,MAAM,GAAIC,KAAD,iBACX;AAAQ,EAAA,OAAO,EAAEA,KAAK,CAACC,WAAvB;AAAA,YACKD,KAAK,CAACE;AADX;AAAA;AAAA;AAAA;AAAA,QADJ;;KAAMH,M;;AAMN,MAAMI,OAAO,GAAIH,KAAD,IAAW;AACvB,QAAM;AAACI,IAAAA;AAAD,MAAUJ,KAAhB;AACA,sBAAQ;AAAA,cAAMI;AAAN;AAAA;AAAA;AAAA;AAAA,UAAR;AACH,CAHD;;MAAMD,O;;AAKN,MAAME,GAAG,GAAG,MAAM;AAAA;;AAEd,QAAM,CAACD,KAAD,EAAQE,QAAR,IAAoBR,QAAQ,CAAC,EAAD,CAAlC;;AACA,QAAMS,UAAU,GAAGC,QAAQ,IAAI;AAC3BF,IAAAA,QAAQ,CAACE,QAAD,CAAR;AACH,GAFD;;AAOA,sBACI;AAAA,4BACI,QAAC,OAAD;AAAS,MAAA,KAAK,EAAEJ;AAAhB;AAAA;AAAA;AAAA;AAAA,YADJ,eAEI,QAAC,MAAD;AAAQ,MAAA,WAAW,EAAE,MAAMG,UAAU,CAAC,IAAD,CAArC;AAA6C,MAAA,IAAI,EAAC;AAAlD;AAAA;AAAA;AAAA;AAAA,YAFJ,eAGI,QAAC,MAAD;AAAQ,MAAA,WAAW,EAAE,MAAMA,UAAU,CAAC,CAAD,CAArC;AAA0C,MAAA,IAAI,EAAC;AAA/C;AAAA;AAAA;AAAA;AAAA,YAHJ,eAII,QAAC,MAAD;AAAQ,MAAA,WAAW,EAAE,MAAMA,UAAU,CAACH,KAAK,GAAG,CAAT,CAArC;AAAkD,MAAA,IAAI,EAAC;AAAvD;AAAA;AAAA;AAAA;AAAA,YAJJ;AAAA;AAAA;AAAA;AAAA;AAAA,UADJ;AAQH,CAlBD;;GAAMC,G;;MAAAA,G;AAoBN,eAAeA,GAAf","sourcesContent":["import React, {useState} from 'react'\n\nconst Button = (props) => (\n    <button onClick={props.handleClick}>\n        {props.text}\n    </button>\n)\n\nconst Display = (props) => {\n    const {value} = props\n    return (<div>{value}</div>)\n}\n\nconst App = () => {\n\n    const [value, setValue] = useState(10)\n    const setToValue = newValue => {\n        setValue(newValue)\n    }\n\n\n\n\n    return (\n        <div>\n            <Display value={value}/>\n            <Button handleClick={() => setToValue(1000)} text=\"thousand\"/>\n            <Button handleClick={() => setToValue(0)} text=\"reset\"/>\n            <Button handleClick={() => setToValue(value + 1)} text=\"increment\"/>\n        </div>\n    )\n}\n\nexport default App"]},"metadata":{},"sourceType":"module"}